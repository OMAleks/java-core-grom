package Lesson_06;


/*
        Класс - это шаблон для создания объектов. Он содержит в себя все свойства, которые могут быть у
            его объектов и все методы, описывающие поведение его объектов.

        Объект не может содержать поля, которые не указаны в его классе. Исключение - наследование (от
        родительского класса).

        Один Объект может содержать  несколько полей Класса, другой объект может содержать другие
        поля Класса. То-есть не обязательно, чтбы один объект использовал все поля класса.
 */

public class Car {          //Access modifier  and class name

                                // {class body}



    //1 fields (=properties = class members) - свойства класса = поля класса

int price;
int yearOfManufacturing;
String color;
String ownerName;
double weight;
int horsePower;
//and so on....


    //2 constructors (метод или путь создания объекта). Определяет каким образом будет создаваться О.
    // (фабрика, которая штампует объекты). Объекты будут создаваться только с теми атрибутами,
    // которые указаны в конструкторах класса
    /*

    public Car(int newPrice, int newYearOfManufacturing, String newOwnerName) { // Car - это не имя метода,
        // а тип возвращаемого значения. В методе-конструкторе имя не используется вообще. Тип будет
        // равен имени  класса. Метод говорит: "Если меня будут вызывать, то я создам объект типа Car".
       //  Параметрами являются отдельные поля класса.

        // Параметрами могу быть другие переменные. Вся логика роботы конструктора заключается в  определении
        // того, какие переменные будут использоваться для создания объекта и в присвоении полям класса
        // значение этих параметров

        price = newPrice;
        yearOfManufacturing = newYearOfManufacturing;
        ownerName = newOwnerName;

        Такой метод работает за счет того, что мы вручную поменяли название параметров конструкта
            (добавили приставку new).
           Но, если конструкторов будет много, то каждый раз менять названия будет не удобно. Чтобы
           упростить процесс, названия параментров конструктора всегда оставляют такими же, как свойства класса.
           Но, чтобы указать компьютеру, что мы хотим присвоить полям класса значения параметров конструктора,
           решили ввести ключевое слово this. Оно означает, что название  переменной, идущей после этого слова
           и точки - это название поля класса, а не название параметра конструктора. Слово this. указывает на
           текущий класс и может указывать не только на то, что это поле класса, но и на то, что это метод класса.
           This указывает на принадлежность переменных или методов к текущему классу.
           В нашем примере с его использованием имеем следующее:

            this.price = price;
            this.yearOfManufacturing = yearOfManufacturing;
            this.ownerName = ownerName;

            Внимание!! Можно исползовать название поля класса внутри конструктора без ключевого слова this, если
                        в параметрах конутруктора нет такой же переменной. Например, можно исопльзвоать переменную
                        color. Тогда автоматически будет считаться, что она принимает значение свойства класса.
                        В этом случае служебное слово this. можно не использовать.

         Если в классе используется больше трех конструкторов (хотя можно технически использовать очень много)
         считается, что код написан не верно, что-то сделано не так, код перегружен.

         Конструкторов вообще может не быть.
            */

    public Car(int price, int yearOfManufacturing, String ownerName) {
        this.price = price;
        this.yearOfManufacturing = yearOfManufacturing;
        this.ownerName = ownerName;
    }
    public Car(){

    }

    //3 methods   (Описание поведения класса)

void startRun () {
    System.out.println("I am running.....");
    }

void stopRun () {
        System.out.println("I am stopping.....");
    }

void changeOwner (String newOwnerName){
    ownerName = newOwnerName;
}

//class  body

                    // !!! Внутри класса может быть другой класс - inner class
    private class Test {


    }








}
